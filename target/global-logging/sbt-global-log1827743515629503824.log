[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\quang\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\quang\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.0 (Oracle Corporation Java 1.8.0_45)
[debug]       Load.loadUnit: plugins took 228.6437ms
[debug]       Load.loadUnit: defsScala took 0.332ms
[debug] [Loading] Scanning directory C:\Users\quang\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\quang\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 29.9196 ms
[debug]           Load.resolveProject(global-plugins) took 66.1165ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\quang\.sbt\1.0\plugins, plugins: List(<none>))) took 216.9759ms
[debug] [Loading] Done in C:\Users\quang\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 296.947ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2532ms
[debug]     Load.loadUnit(file:/C:/Users/quang/.sbt/1.0/plugins/, ...) took 534.1432ms
[debug]   Load.apply: load took 1107.8525ms
[debug]   Load.apply: resolveProjects took 6.5801ms
[debug]   Load.apply: finalTransforms took 77.3653ms
[debug]   Load.apply: config.delegates took 9.466ms
[debug]   Load.apply: Def.make(settings)... took 540.9289ms
[debug]   Load.apply: structureIndex took 82.5419ms
[debug]   Load.apply: mkStreams took 1.6838ms
[info] loading global plugins from C:\Users\quang\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 6176.8867ms
[debug]           Load.loadUnit: plugins took 23.8479ms
[debug]           Load.loadUnit: defsScala took 0.003ms
[debug] [Loading] Scanning directory C:\Users\quang\ScalaProjects\predictionIO\project
[debug]             Load.loadUnit: mkEval took 18.5161ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\quang\ScalaProjects\predictionIO\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.0323 ms
[info] loading settings for project predictionio-build from idea.sbt ...
[debug]               Load.resolveProject(predictionio-build) took 2.6359ms
[debug]             Load.loadTransitive: finalizeProject(Project(id predictionio-build, base: C:\Users\quang\ScalaProjects\predictionIO\project, plugins: List(<none>))) took 5.0786ms
[debug] [Loading] Done in C:\Users\quang\ScalaProjects\predictionIO\project, returning: (predictionio-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2538.2566ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.4752ms
[debug]         Load.loadUnit(file:/C:/Users/quang/ScalaProjects/predictionIO/project/, ...) took 2570.2876ms
[debug]       Load.apply: load took 2571.7572ms
[debug]       Load.apply: resolveProjects took 0.1332ms
[debug]       Load.apply: finalTransforms took 6.0578ms
[debug]       Load.apply: config.delegates took 0.8066ms
[debug]       Load.apply: Def.make(settings)... took 69.1835ms
[debug]       Load.apply: structureIndex took 20.1128ms
[debug]       Load.apply: mkStreams took 0.0025ms
[info] loading project definition from C:\Users\quang\ScalaProjects\predictionIO\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 5797.1924ms
[debug]     Load.loadUnit: defsScala took 0.0022ms
[debug] [Loading] Scanning directory C:\Users\quang\ScalaProjects\predictionIO
[debug]       Load.loadUnit: mkEval took 0.2914ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\quang\ScalaProjects\predictionIO, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.3328 ms
[info] loading settings for project predictionio from build.sbt ...
[debug]         Load.resolveProject(predictionio) took 32.6192ms
[debug]       Load.loadTransitive: finalizeProject(Project(id predictionio, base: C:\Users\quang\ScalaProjects\predictionIO, plugins: List(<none>))) took 35.0057ms
[debug] [Loading] Done in C:\Users\quang\ScalaProjects\predictionIO, returning: (predictionio)
[debug]     Load.loadUnit: loadedProjectsRaw took 1180.4877ms
[debug]     Load.loadUnit: cleanEvalClasses took 8.8297ms
[debug]   Load.loadUnit(file:/C:/Users/quang/ScalaProjects/predictionIO/, ...) took 6986.9824ms
[debug] Load.apply: load took 6988.2932ms
[debug] Load.apply: resolveProjects took 0.0897ms
[debug] Load.apply: finalTransforms took 20.9702ms
[debug] Load.apply: config.delegates took 0.1955ms
[debug] Load.apply: Def.make(settings)... took 96.0667ms
[debug] Load.apply: structureIndex took 18.1426ms
[debug] Load.apply: mkStreams took 0.0035ms
[info] set current project to predictionIO (in build file:/C:/Users/quang/ScalaProjects/predictionIO/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 62481 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 62481, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to predictionIO (in build file:/C:/Users/quang/ScalaProjects/predictionIO/)
[debug] > Exec(idea-shell, None, None)
